* Contributing
  :PROPERTIES:
  :CUSTOM_ID: contributing
  :END:

If you would like to contribute, details:

- For more signifiant potential changes, file an issue first to get feedback on the basic idea.
- If you do submit a PR, follow the [[https://github.com/bbatsov/emacs-lisp-style-guide][elisp style guide]], and [[https://cbea.ms/git-commit/][these suggestions]] on git commit messages.
- For working on lists and such, we primarily use the =seq= functions, and occassionally ~dolist~.

** Extending citar

Most user-accessible citar functions take an argument ~key-entry~ or ~keys-entries~.
These expect, respectively, a cons cell of a citation key (a string like "SmithWritingHistory1987") and the corresponding bibliography entry for that citation, or a list of such cons cells.
If you wish to extend citar at the user-action level, perhaps by adding a function to one of the embark keymaps, you will find it easiest to reproduce this pattern.
If you need to build the cons cells manually, this can be accomplished via ~citar--get-entry~.
So, for example, to insert the annotations from a pdf into a buffer, the following pair of functions might be used:

#+begin_src emacs-lisp


(defun my/citar-insert-annots (keys-entries)
  "insert annotations as org text from KEYS-ENTRIES"
  (interactive (list (citar-select-refs
                      :rebuild-cache current-prefix-arg)))
  (let* ((files
          (seq-mapcat (lambda (key-entry)
                        (citar-file--files-for-entry
                         (car key-entry) (cdr key-entry)
                         '("/") '("pdf")))
                      keys-entries ))
         (output (seq-map
                  (lambda (file)
                    (pdf-annot-markups-as-org-text ;; you'll still need to write this function!
                     file)
                  files)))
    (save-excursion
      (org-forward-element)
      (-each output (lambda (out)
                      (insert (format "\n%s\n" out))))
      output)))


  (defun my/independent-insert-annots (key)
    "helper function to insert annotations without the bibtex-actins apparatus"
    (let ((key-entry (cons key  (citar--get-entry key))))
      (my/citar-insert-annots (list key-entry))))


#+end_src

Then bind the first function to the appropriate keymap, e.g., 
#+begin_src emacs-lisp
(define-key oc-citar-map (kbd "a") '("insert file annotations" . my/citar-insert-annots))
#+end_src
